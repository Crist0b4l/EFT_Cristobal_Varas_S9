# -*- coding: utf-8 -*-
"""eft

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qKQdJXuzWE-adHKBeNMyKFOQhbk9_8YA
"""

import datetime

ASIENTOS_TOTALES = 48 #Numero total de asientos
ASIENTO_PREMIUM = 250000 #Valor pasaje premium (Ventana o pasillo)
ASIENTO_GENERAL = 170300 #Valor general
DESCUENTO_DUOC = 0.12 #Descuento del 12% clientes banco duoc

asientos = [True] * ASIENTOS_TOTALES #arreglo con la cantidad de asientos totales, los asientos True son asientos disponibles y los asientos False son asientos ocupados

pasajeros = [None] * ASIENTOS_TOTALES #arreglo en primera instancia con datos vacios que se llenaran a medida que el cliente compre

#Funcion para mostrar asientos disponibles
def mostrar_asientos():
  print("\nAsientos disponibles: (X = asiento ocupado)\n")

  for fila in range(0, ASIENTOS_TOTALES, 6): # Recorre el total de asientos de a 6 (asientos por fila)
    print("|", end=" ") # Imprime la barra lateral para visualizar los asientos de forma mas clara

    for i in range(fila, fila+3): #Imprime los 3 primeros asientos antes del pasillo
      if asientos[i]:
        print(f"{i+1}", end=" ") #Muestra asiento dejando espacio entre cada uno
      else:
        print("X", end=" ") #Muestra X si esta ocupado

    print("   ", end="") #Agregar espacio para mostrar el pasillo

    for i in range(fila+3, fila+6): #Imprime los 3 ultimos asientos despues del pasillo
      if asientos[i]:
        print(f"{i+1}", end=" ")
      else:
        print("X", end=" ")

    print("|") #Imprime la barra lateral para visualizar los asientos de forma mas clara
    print()


#Funcion para validar rut
def validar_rut(rut):
    try:
        # Validar si el RUT es un string de solo números, seguido de una 'K' o un dígito verificador
        rut_num, dv = rut[:-1], rut[-1].upper()  # Separar el número del dígito verificador
        if not rut_num.isdigit():  # Verificar que la parte numérica sea válida
            raise ValueError("El RUT debe contener solo números antes del dígito verificador.")
        if dv not in "0123456789K":  # Verificar que el dígito verificador sea un número o una 'K'
            raise ValueError("El dígito verificador no es válido.")

        # Si el RUT pasa las validaciones
        return True

    except ValueError as e:
        # Capturar el error y mostrar el mensaje
        print(f"Error: {e}")
        return False  # Retorna False si hubo un error

#Funcion para validar telefono
def validar_telefono(telefono):
    try:
        if not telefono.isdigit():  # Verifica que el teléfono contenga solo números
            raise ValueError("El teléfono debe contener solo números.")
        if len(telefono) != 9:  # Verifica que el teléfono tenga exactamente 9 dígitos
            raise ValueError("El teléfono debe tener exactamente 9 dígitos.")
        return True
    except ValueError as e:
        print(f"Error: {e}")
        return False

#Funcion para comprar asientos
def comprar_asiento():
  while True:
    mostrar_asientos() #Muestra asientos
    try:
      num_asiento = int(input("Selecciona un asiento (1-48) o presione 0 para cancelar "))
    except ValueError:
            print("Por favor, ingrese un número válido.")
            continue

    if num_asiento == 0:
      print("\nCompra cancelada.\n")
      return

    num_asiento -= 1 #Se resta uno para alinearse con el indice

    #Validar que el numero de asiento ingresado este dentro del rango 1-48
    if num_asiento < 0 or num_asiento > 47:
      print("Número de asiento inválido.")
      continue

    #Validar que el asiento este disponible
    elif not asientos[num_asiento]:
      print("Asiento no disponible.")
      continue

    #Determinar posicion del asiento
    fila = num_asiento // 6
    posicion_fila = num_asiento % 6

    if posicion_fila in [0, 5]: #Asientos de ventana (1-6 de cada fila)
      precio = ASIENTO_PREMIUM
    elif posicion_fila in [2,3]: #Asientos de pasillo (3-4 de cada fila)
      precio = ASIENTO_PREMIUM
    else:
      precio = ASIENTO_GENERAL #Asientos generales


    #Solicitar datos del pasajero
    nombre_pasajero = input("Ingrese nombre y apellidos: ")
    rut_pasajero = input("Ingrese RUT(sin puntos y sin guíon): ")
    while not validar_rut(rut_pasajero):
      rut_pasajero = input("RUT inválido. Ingrese nuevamente (sin puntos y sin guíon): ")
    telefono_pasajero = input("Ingrese teléfono: ")
    while not validar_telefono(telefono_pasajero):
      telefono_pasajero = input("Teléfono inválido. Ingrese nuevamente: ")
    banco_pasajero = input("Ingrese banco (12% de descuento pagando con bancoDuoc): ")


    #Descuento por banco Duoc
    if banco_pasajero.lower() == "bancoduoc":
      precio -= precio * DESCUENTO_DUOC

    #Mostrar precio asiento
    print(f"El valor del asiento es: ${precio}")
    confirmar = input("¿Desea confirmar la compra del asiento?(si/no): ")


    #Confirmar compra
    if confirmar.lower() == "si":
      asientos[num_asiento] = False #Marcar asiento como ocupado
      pasajeros[num_asiento] = {
        "nombre": nombre_pasajero,
        "rut": rut_pasajero,
        "telefono": telefono_pasajero,
        "banco": banco_pasajero
      }
      print("\nCompra realizada con éxito.\n")
      print(f"pasajero: {nombre_pasajero.title()}")
      print(f"rut: {rut_pasajero}")
      print(f"telefono: {telefono_pasajero}")
      print(f"banco: {banco_pasajero}")
      print(f"precio: ${precio}\n")
      break
    else:
      print("\nCompra cancelada.\n")
      break


#Funcion anular asiento
def anular_asiento():
  while True:
    mostrar_asientos()
    num_asiento = int(input("Selecciona un asiento (1-48) para anular o presione 0 para cancelar: "))

    if num_asiento == 0:
      print("\nAnulación cancelada.\n")
      return

    num_asiento -= 1 #Se resta uno para alinearse con el indice


    #Validar que sea un asiento dentro del rango
    if num_asiento < 0 or num_asiento > 47:
      print("Número de asiento inválido.")
      continue

    #Validar que el asiento este ocupado
    if asientos[num_asiento]:
      print("Asiento no está ocupado.")
      continue

    #Confirmar que sea el mismo pasajero que compro el asiento
    while True:
      rut_pasajero = input("Ingrese su RUT(sin puntos y sin guión) para confirmar la anulación o presione 0 para cancelar: ")

      if rut_pasajero == "0":
        print("\nAnulación cancelada.\n")
        return

      if pasajeros[num_asiento]["rut"] != rut_pasajero: #Busca que el rut ingresado coincida con el rut registrado al momento de comprar
        print("El RUT ingresado no coincide con el del pasajero.")
        continue

      asientos[num_asiento] = True #Cambia estado a True para dejarlo disponible
      pasajeros[num_asiento] = None #Borra los datos del usuario registrado
      print("\nAnulación realizada con éxito.\n")
      break


#Funcion modificar datos
def modificar_datos():
    while True:
        mostrar_asientos()  # Muestra asientos disponibles
        num_asiento = int(input("Ingrese el número de asiento (1-48) o presione 0 para cancelar "))

        if num_asiento == 0:
            print("\nModificación cancelada.\n")
            return

        num_asiento -= 1 #Se resta uno para alinearse con el indice


        # Validar que el número de asiento esté en el rango válido
        if num_asiento < 0 or num_asiento > 47:
            print("Número de asiento inválido. Intente nuevamente.")
            continue

        # Validar que el asiento esté ocupado
        if asientos[num_asiento]:
            print("Asiento no está ocupado.")
            continue

        if pasajeros[num_asiento] is None:
          print("Este asiento no ha sido reservado.")
          continue

        rut_pasajero = input("Ingrese el RUT (sin puntos y sin guión) del pasajero: ")
        if pasajeros[num_asiento]["rut"] != rut_pasajero:
            print("El RUT ingresado no coincide con el del pasajero.")
            continue

        while True:
            print("\nSeleccione el dato que desea modificar:\n")
            print("1. Nombre")
            print("2. Teléfono")
            print("3. Cancelar")
            opcion = input()

            if opcion == "1":
                nuevo_nombre = input("Ingrese el nuevo nombre: ")
                pasajeros[num_asiento]["nombre"] = nuevo_nombre
                print("Nombre modificado con éxito.")
                print(f"pasajero: {nuevo_nombre.title()}")
                break
            elif opcion == "2":
                nuevo_telefono = input("Ingrese el nuevo teléfono: ")
                pasajeros[num_asiento]["telefono"] = nuevo_telefono
                print("Teléfono modificado con éxito.")
                print(f"telefono: {nuevo_telefono}")
                break
            elif opcion == "3":
                print("\nModificación cancelada.\n")
                return
            else:
                print("\nOpción inválida. Por favor, seleccione una opción válida.\n")


#Funcion menu
def menu():
  while True:
    print("Menú TETINKA")
    print("1.	Ver asientos disponibles")
    print("2.	Comprar asiento")
    print("3.	Anular vuelo")
    print("4.	Modificar datos de pasajero")
    print("5.	Salir")
    opcion = input("Selecciona una opción: ")

    if opcion == "1":
      mostrar_asientos()
    elif opcion == "2":
      comprar_asiento()
    elif opcion == "3":
      anular_asiento()
    elif opcion == "4":
      modificar_datos()
    elif opcion == "5":
      print("Gracias por usar el sistema de gestión de vuelos.")
      print("Creado por: Cristóbal Varas Polanco")
      fecha = datetime.datetime.now()
      fecha_formateada = fecha.strftime("%d/%m/%Y")
      print(fecha_formateada)
      break
    else:
      print("\nOpción no válida. Por favor, selecciona una opción válida.\n")

menu()